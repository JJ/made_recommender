\documentclass{article}
\usepackage{arxiv}
\usepackage[utf8]{inputenc} % allow utf-8 input
\usepackage[T1]{fontenc}    % use 8-bit T1 fonts
\usepackage{hyperref}       % hyperlinks
\usepackage{url}            % simple URL typesetting
\usepackage{booktabs}       % professional-quality tables
\usepackage{amsfonts}       % blackboard math symbols
\usepackage{nicefrac}       % compact symbols for 1/2, etc.
\usepackage{microtype}      % microtypography
\usepackage{lipsum}		% Can be removed after putting your text content
\usepackage{graphicx}
\usepackage{minted, xcolor}
\usemintedstyle{native}
\definecolor{bg}{HTML}{282828}
\setminted[python]{xleftmargin=0em, bgcolor=bg}
%\usepackage{graphicx} % Includegraphics
%usepackage{fancyvrb, color, graphicx, hyperref, amsmath, url}
%\usepackage{palatino}


\begin{document}

\title{Tropes in films: an initial analysis}

\author{Rubén Héctor García-Ortega\thanks{Badger Maps, Granada} \and Pablo García-Sánchez\thanks{Department of Computer Science and Engineering, University of C\'adiz} \and JJ Merelo\thanks{University of Granada}}

\maketitle

\begin{abstract}
    We present the process to automatically extract all the tropes, grouped by film, from the TVTropes database through
    the library tropescraper, how to interpret the results and how to manipulate and represent them using pandas,
    and matplotlib.
\end{abstract}

{\bf Keywords}: Tropes; TvTropes; tropescraper.

\section{Motivations} \label{sec:problem}

Researches on story generation can benefit from having all the tropes discovered for all the films.

\begin{enumerate}
\item There is a wiki called TV Tropes that describes thousands of films and tropes,
and has a prolific community to feed the data.
\item A project called DBTropes had the goal to extract n-tuples from TV Tropes so they can be automatically processed,
including, among many other interesting information, the tropes and the films.
\item DB Tropes was discontinued in 2016 and the latest snapshot of the n-tuples was built in 2016-07-01.
\item Recent publications still need to use the data from 2016 but would benefit from having updated information.
\end{enumerate}

In order to fulfill the need to have an updated corpus of films and tropes,
in 2019 we developed a library called tropescraper that:
\begin{enumerate}
\item is able to connect to the wiki TV Tropes
\item crawls through all the films and extract their tropes
\item returns a small dataset in a standard format.
\end{enumerate}

\section{The structure of the report}

The current report details how the library tropescraper is built, how to use it, how to interpret the results and
how it can be analyzed.
The report uses the technology called pweave that is able to execute python snippets inside latex documents,
so the code examples are actually run and the output is real.
The source of the report can be downloaded at
\url{https://github.com/raiben/made_recommender/blob/master/papers/tropescraper_arxiv.texw}
and can be re-run for further researches by the scientific community.

\section{Design of the tool} \label{design}
TODO

\section{Tropes extraction} \label{sec:extraction}
TODO

\section{Dataset interpretation} \label{sec:datase}
TODO

\section{Analyzing tools} \label{sec:tools}

Pre-conditions:
\begin{enumerate}
\item If you don't have access to the dbtropes file, please download it from:
\url{http://skipforward.opendfki.de/wiki/DBTropes} and unzip it. Then copy the path.
\item If you don't have access to the tropescraper-generated file, please run tropescraper and copy the path.
\item Use the dbtropes\_dataset and tropescraper\_dataset as mappings from films to tropes:
[film]->[trope\_1,...,trope\_n]
\item Use the dbtropes\_dataset\_reversed and tropescraper\_dataset\_reversed as mappings from films to tropes:
[trope]->[film\_1,...,film\_n]
\end{enumerate}

Data load:


<<>>=
DBTROPES_GENERATED_FILE_PATH = '/Users/phd/Downloads/dbtropes/dbtropes-20160701.nt'
TROPESCRAPER_GENERATED_FILE_PATH = '/Users/phd/workspace/made/tropescraper/bin/tvtropes.json'

DBTROPES_DATE = '20160701'
TROPESCRAPER_DATE = '20190915'

BINS = 100
FIGURE_SIZE = [12,5]
@

Let's define a function to reverse the film -> tropes mapping

<<>>=
def reverse_mapping(mapping):
    reverse_map = {}
    for key in mapping.keys():
        for value in mapping[key]:
            if value not in reverse_map:
                reverse_map[value] = []
            reverse_map[value].append(key)
    return reverse_map
@

Load the dbtropes dataset from the n-tuples file:

<<>>=
import re

template = '^<http://dbtropes.org/resource/Film/([^>]+)> ' \
           + '<http://skipforward.net/skipforward/resource/seeder/skipinions/hasFeature> ' \
           + '<http://dbtropes.org/resource/Main/([^/]+)/[^>/]+>.*$'
dbtropes_dataset = {}
dbtropes_films = set()
dbtropes_tropes = set()

with open(DBTROPES_GENERATED_FILE_PATH, 'r') as bdtropes_file:
    line = bdtropes_file.readline()
    counter = 1
    while line:
        matches = re.match(template, line)
        if matches:
            film = matches.group(1)
            dbtropes_films.add(film)

            trope = matches.group(2)
            dbtropes_tropes.add(trope)

            if film not in dbtropes_dataset:
                dbtropes_dataset[film] = set()

            dbtropes_dataset[film].add(trope)

        line = bdtropes_file.readline()
        counter += 1

dbtropes_dataset_reversed = reverse_mapping(dbtropes_dataset)

print(f'Summary:\n - Lines = {counter-1:,}\n - Films count = {len(dbtropes_films):,}\n'
      f' - Tropes count = {len(dbtropes_tropes):,}')
@

Load the tropescraper dataset:

<<>>=
import json

tropescraper_films = set()
tropescraper_tropes = set()

with open(TROPESCRAPER_GENERATED_FILE_PATH, 'r') as tropescraper_file:
    tropescraper_dataset = json.load(tropescraper_file)

tropescraper_films = set(dbtropes_dataset.keys())
for key in tropescraper_films:
    tropescraper_tropes.update(dbtropes_dataset[key])

tropescraper_dataset_reversed = reverse_mapping(tropescraper_dataset)

print(f'Summary:\n - Films count = {len(tropescraper_films):,}\n'
      f' - Tropes count = {len(tropescraper_tropes):,}')
@

\subsection{Descriptive analysis of the tropes}

Pre-calculations:

<<>>=
import matplotlib.pyplot as plt
from IPython.display import display, Latex
from scipy import stats
import pandas as pd

dbtropes_dataset_count_by_film = {film:len(dbtropes_dataset[film])
                                  for film in dbtropes_dataset.keys()}
tropescraper_dataset_count_by_film = {film:len(tropescraper_dataset[film])
                                      for film in tropescraper_dataset.keys()}

what = 'tropes'
dbtropes_values = list(dbtropes_dataset_count_by_film.values())
tropescraper_values = list(tropescraper_dataset_count_by_film.values())
@

Statistics

<<results="tex">>=
dbtropes_stats = stats.describe(dbtropes_values)
tropescraper_stats = stats.describe(tropescraper_values)
dataframe = pd.DataFrame.from_dict({
    'min':[dbtropes_stats.minmax[0],tropescraper_stats.minmax[0]],
    'max':[dbtropes_stats.minmax[1], tropescraper_stats.minmax[1]],
    'nobs':[dbtropes_stats.nobs, tropescraper_stats.nobs],
    'mean':[dbtropes_stats.mean, tropescraper_stats.mean],
    'kurtosis':[dbtropes_stats.kurtosis, tropescraper_stats.kurtosis],
    'skewness':[dbtropes_stats.skewness, tropescraper_stats.skewness],
    'variance':[dbtropes_stats.variance, tropescraper_stats.variance]
}, orient='index')
dataframe.columns = [DBTROPES_DATE, TROPESCRAPER_DATE]
display(Latex(dataframe.to_latex()))
@

Boxplots

<<fig=True, width="\linewidth", f_pos="h", f_size=(16,9)>>=
values_concatenated = pd.DataFrame.from_dict({
    DBTROPES_DATE: dbtropes_values,
    TROPESCRAPER_DATE: tropescraper_values
}, orient='index')
values_concatenated.transpose().plot(kind='box', figsize=FIGURE_SIZE, logy=True)
@

Trope frequencies

<<fig=True, width="\linewidth", f_pos="h", f_size=(16,9)>>=
dataframe = pd.DataFrame.from_dict({'values':dbtropes_values})
frequencies = pd.DataFrame([dataframe.iloc[:,0].value_counts()]).transpose().reset_index()
ax = frequencies.plot.scatter(x='index', y='values', color='Blue', label=DBTROPES_DATE,
                              logy=True)

dataframe = pd.DataFrame.from_dict({'values':tropescraper_values})
frequencies = pd.DataFrame([dataframe.iloc[:,0].value_counts()]).transpose().reset_index()
frequencies.plot.scatter(x='index', y='values', color='Orange', label=TROPESCRAPER_DATE,
                         ax=ax, logy=True)
@

\subsection{Descriptive analysis of the films}

Pre-calculations:

<<>>=
import matplotlib.pyplot as plt
from IPython.display import display, Latex
from scipy import stats
import pandas as pd

dbtropes_dataset_count_by_trope = {trope:len(dbtropes_dataset_reversed[trope])
                                   for trope in dbtropes_dataset_reversed.keys()}
tropescraper_dataset_count_by_trope = {trope:len(tropescraper_dataset_reversed[trope])
                                      for trope in tropescraper_dataset_reversed.keys()}

what = 'films'
dbtropes_values = list(dbtropes_dataset_count_by_trope.values())
tropescraper_values = list(tropescraper_dataset_count_by_trope.values())
@

Statistics

<<results="tex">>=
dbtropes_stats = stats.describe(dbtropes_values)
tropescraper_stats = stats.describe(tropescraper_values)
dataframe = pd.DataFrame.from_dict({
    'min':[dbtropes_stats.minmax[0],tropescraper_stats.minmax[0]],
    'max':[dbtropes_stats.minmax[1], tropescraper_stats.minmax[1]],
    'nobs':[dbtropes_stats.nobs, tropescraper_stats.nobs],
    'mean':[dbtropes_stats.mean, tropescraper_stats.mean],
    'kurtosis':[dbtropes_stats.kurtosis, tropescraper_stats.kurtosis],
    'skewness':[dbtropes_stats.skewness, tropescraper_stats.skewness],
    'variance':[dbtropes_stats.variance, tropescraper_stats.variance]
}, orient='index')
dataframe.columns = [DBTROPES_DATE, TROPESCRAPER_DATE]
display(Latex(dataframe.to_latex()))
@

Boxplots

<<fig=True, width="\linewidth", f_pos="h", f_size=(16,9)>>=
values_concatenated = pd.DataFrame.from_dict({
    DBTROPES_DATE: dbtropes_values,
    TROPESCRAPER_DATE: tropescraper_values
}, orient='index')
values_concatenated.transpose().plot(kind='box', figsize=FIGURE_SIZE, logy=True)
@

Trope frequencies

<<fig=True, width="\linewidth", f_pos="h", f_size=(16,9)>>=
dataframe = pd.DataFrame.from_dict({'values':dbtropes_values})
frequencies = pd.DataFrame([dataframe.iloc[:,0].value_counts()]).transpose().reset_index()
ax = frequencies.plot.scatter(x='index', y='values', color='Blue', label=DBTROPES_DATE,
                              logy=True)

dataframe = pd.DataFrame.from_dict({'values':tropescraper_values})
frequencies = pd.DataFrame([dataframe.iloc[:,0].value_counts()]).transpose().reset_index()
frequencies.plot.scatter(x='index', y='values', color='Orange', label=TROPESCRAPER_DATE,
                         ax=ax, logy=True)
@

\subsection{Graph analysis}
TODO

\section{Summary of the data on 2019/10} \label{sec:data}


\section*{Acknowledgements}
This work has been partially funded by projects DeepBio (TIN2017-85727-C4-2-P) and TEC2015-68752
and ``Ayuda del Programa de Fomento e Impulso de la actividad Investigadora de la Universidad de C\'adiz''.

\section{Bibliography}
\bibliographystyle{abbrv}
\bibliography{report}

\end{document}
