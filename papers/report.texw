<<echo=False>>=
import bz2
import json

FILM_TROPES_JSON_BZ2_FILE = '../datasets/scraper/cache/20190501/films_tropes_20190501.json.bz2'

def read_compressed_json(file_path):
    with open(file_path, 'rb') as file:
        compressed_content = file.read()
    content = bz2.decompress(compressed_content)
    return json.loads(content)


def reverse_dictionary(original_dictionary):
    reversed_dictionary = {}
    for key, value in original_dictionary.items():
        for element in value:
            if element not in reversed_dictionary:
                reversed_dictionary[element] = []
            reversed_dictionary[element].append(key)
    return reversed_dictionary

import pygraphviz as pgv
import os

def draw_graphviz(dot, filename):
    new_dot = dot.replace('type="database"', 'shape="cylinder" margin=0.2')
    new_dot = new_dot.replace('type="process"', 'shape="box3d" margin=0.2 style="filled" fillcolor="gray91"')
    new_dot = new_dot.replace('type="data"', 'shape="polygon" skew=.4 margin=0')

    G = pgv.AGraph(string=new_dot)
    G.layout(prog='dot')
    if not os.path.isdir('figures'):
        os.makedirs('figures')
    G.draw(os.path.join('figures', filename))

@
\documentclass[11pt,final]{article}
\usepackage{fancyvrb, color, graphicx, hyperref, amsmath, url}
\usepackage{minted}
\usepackage{palatino}
\usepackage[a4paper,text={16.5cm,25.2cm},centering]{geometry}
\usepackage{booktabs}
\usepackage{float}
\restylefloat{table}
\usepackage{authblk}
\usepackage{listings}
\usepackage{color}
\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}
\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolour},
    commentstyle=\color{codegreen},
    keywordstyle=\color{magenta},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codepurple},
    basicstyle=\footnotesize,
    breakatwhitespace=false,
    breaklines=true,
    captionpos=b,
    keepspaces=true,
    numbers=left,
    numbersep=5pt,
    showspaces=false,
    showstringspaces=false,
    showtabs=false,
    tabsize=2
}
\lstset{style=mystyle}

\author[1]{Rub\'en H. Garc\'ia-Ortega}
\author[2]{Juan J. Merelo Guerv\'os}
\author[3]{Pablo Garc\'ia S\'anchez}
\affil[1]{Badger Maps, San Francisco, CA, USA}
\affil[2]{Universidad de Granada and CITIC-UGR, Spain}
\affil[3]{Universidad de C\'adiz and CITIC-UGR, Spain}
\renewcommand\Authands{ and }

% Commands from pandoc
\providecommand{\tightlist}{%
\setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}
\setcounter{secnumdepth}{0}
\newcommand{\VerbBar}{|}
\newcommand{\VERB}{\Verb[commandchars=\\\{\}]}
\DefineVerbatimEnvironment{Highlighting}{Verbatim}{commandchars=\\\{\}}
\newenvironment{Shaded}{}{}
\newcommand{\KeywordTok}[1]{\textcolor[rgb]{0.00,0.44,0.13}{\textbf{#1}}}
\newcommand{\DataTypeTok}[1]{\textcolor[rgb]{0.56,0.13,0.00}{#1}}
\newcommand{\DecValTok}[1]{\textcolor[rgb]{0.25,0.63,0.44}{#1}}
\newcommand{\BaseNTok}[1]{\textcolor[rgb]{0.25,0.63,0.44}{#1}}
\newcommand{\FloatTok}[1]{\textcolor[rgb]{0.25,0.63,0.44}{#1}}
\newcommand{\ConstantTok}[1]{\textcolor[rgb]{0.53,0.00,0.00}{#1}}
\newcommand{\CharTok}[1]{\textcolor[rgb]{0.25,0.44,0.63}{#1}}
\newcommand{\SpecialCharTok}[1]{\textcolor[rgb]{0.25,0.44,0.63}{#1}}
\newcommand{\StringTok}[1]{\textcolor[rgb]{0.25,0.44,0.63}{#1}}
\newcommand{\VerbatimStringTok}[1]{\textcolor[rgb]{0.25,0.44,0.63}{#1}}
\newcommand{\SpecialStringTok}[1]{\textcolor[rgb]{0.73,0.40,0.53}{#1}}
\newcommand{\ImportTok}[1]{#1}
\newcommand{\CommentTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textit{#1}}}
\newcommand{\DocumentationTok}[1]{\textcolor[rgb]{0.73,0.13,0.13}{\textit{#1}}}
\newcommand{\AnnotationTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textbf{\textit{#1}}}}
\newcommand{\CommentVarTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textbf{\textit{#1}}}}
\newcommand{\OtherTok}[1]{\textcolor[rgb]{0.00,0.44,0.13}{#1}}
\newcommand{\FunctionTok}[1]{\textcolor[rgb]{0.02,0.16,0.49}{#1}}
\newcommand{\VariableTok}[1]{\textcolor[rgb]{0.10,0.09,0.49}{#1}}
\newcommand{\ControlFlowTok}[1]{\textcolor[rgb]{0.00,0.44,0.13}{\textbf{#1}}}
\newcommand{\OperatorTok}[1]{\textcolor[rgb]{0.40,0.40,0.40}{#1}}
\newcommand{\BuiltInTok}[1]{#1}
\newcommand{\ExtensionTok}[1]{#1}
\newcommand{\PreprocessorTok}[1]{\textcolor[rgb]{0.74,0.48,0.00}{#1}}
\newcommand{\AttributeTok}[1]{\textcolor[rgb]{0.49,0.56,0.16}{#1}}
\newcommand{\RegionMarkerTok}[1]{#1}
\newcommand{\InformationTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textbf{\textit{#1}}}}
\newcommand{\WarningTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textbf{\textit{#1}}}}
\newcommand{\AlertTok}[1]{\textcolor[rgb]{1.00,0.00,0.00}{\textbf{#1}}}
\newcommand{\ErrorTok}[1]{\textcolor[rgb]{1.00,0.00,0.00}{\textbf{#1}}}
\newcommand{\NormalTok}[1]{#1}
% end of commands from pandoc

\hypersetup
{
  pdfauthor = {Rub\'en H. Garc\'ia-Ortega},
  pdftitle={MADE Recommender},
  colorlinks=TRUE,
  linkcolor=black,
  citecolor=blue,
  urlcolor=blue
}

\setlength{\parindent}{0pt}
\setlength{\parskip}{1.2ex}

<<echo=False>>=
import os
import sys
sys.path.append(os.getcwd())
@

\title{MADE Recommender}
\date{23rd June 2018}

\begin{document}
\maketitle

\begin{abstract}
  The purpose of this document is to show the progress of the current research and
  the different approaches and experiments designed, executed and interpreted,
  regarding a system to recommend tropes for a film.
  Later on, the different sections can be extracted and use for different articles.
  This document is internal and in continuous progress, so it may change profoundly
  from its creation.
\end{abstract}


\section{Tropes as the DNA os a story}

\subsection{The meaning of Trope}

A trope can be defined as a recurring narrative device~\cite{baldick2015oxford};
it can be a technique, a motif, an archetype or a \textit{clich\'e},
used by the authors to achieve specific effects that might vary from increasing
the interest, surprising, recall familiarity,
entertaining, etc, in their creative works, such as books, films, comics or videogames.
Some tropes are broadly adopted, academically studied and promoted, such as
the \textit{Three-act Structure} formulated by Syd Field~\cite{field1982screenplay},
the \textit{Hero's Journey} studied by Vogler~\cite{vogler2007writer},
the \textit{McGuffin} popularized by Hitchcock~\cite{truffaut1985hitchcock} and
the \textit{Chekhov's Gun} developed by the Russian writer with the eponymous
name~\cite{bitsilli1983chekhov},
but there are thousands of not-so-widely used tropes as well, discovered and
catalogued everyday by professionals
and enthusiastic of the storytelling;
their study is organic, dynamic and extensive.

\subsection{The DNA analogy}

Just as the DNA is a molecule that contains nitrogenous bases whose combination defines the growth,
development, functioning, and reproduction of a living organism, we can think of a Story DNA
as the set of tropes contained in a story that defines the nature of a story: how it is
structured, the characters, the events, the mood, the settings, the narration, etc.
Different combinations of tropes generate different stories.
As the tropes are living concepts, which grow as they are discovered as common
patterns in other stories, the Trope DNA is, by definition, incomplete and evolving,
yet it is still interesting as an authoring tool.

The Story DNA is a profound way to describe a story from many different perspectives,
but, following the analogy of the DNA, there are environmental factors that could deeply affect the
performance of the story as well. What do two stories with the same Story DNA have in common?

\subsection{Hypothesis}

Our hypothesis is that there is a correlation between the combination of tropes and the quality of the story.
If the hypothesis is true, it could indeed be a very important device to synthesise Story DNAs that fulfils requirements
in terms of tropes present while maximizing the quality, that is ultimately the goal of the research:
auto-generate interesting stories.

\section{Steps}
<<echo=False>>=
workflow = '''
digraph {
    rankdir=LR
    margin=0;
    graph [ resolution=128, fontsize=14 ];

    tvtropes[label="TVTropes\nwebsite" type="database"];
    scraper[label="Scraper\nprocess" type="process"];
    dataset1[label="Dataset\nFilm->(tropes)" type="data"];
    imdb[label="IMDB\ndatabases" type="database"];
    matcher[label="Film\nmatcher\nprocess" type="process"];
    dataset2[label="Dataset\nFilm->(tropes,\nrating, genres)" type="data"];
    recommender[label="Trope\nRecommender\nprocess" type="process"];
    user[label="User's\npre-selected\ntropes" type="data"];
    builder[label="Trope\nbuilder\nprocess" type="process"];
    trope_sequence[label="Optimal\ntrope\nsequence" type="data"]

    tvtropes -> scraper;
    scraper -> dataset1;
    dataset1 -> matcher;
    imdb -> matcher;
    matcher -> dataset2;
    dataset2 -> recommender;
    recommender -> builder
    user -> builder
    builder -> trope_sequence
}'''

draw_graphviz(workflow, "main_workflow.pdf")
@
\begin{figure}[h]
\includegraphics[width=\textwidth]{figures/main_workflow.pdf}
\centering
\end{figure}

<<echo=False>>=
films_dictionary = read_compressed_json(FILM_TROPES_JSON_BZ2_FILE)
tropes_dictionary = reverse_dictionary(films_dictionary)

n_films = len(films_dictionary.keys())
n_tropes = len(tropes_dictionary.keys())


workflow = f'''
digraph {{
    splines=polyline
    rankdir=LR
    margin=0;
    graph [ resolution=128, fontsize=14];

    tvtropes[label="TVTropes\nwebsite:\n\nhttps://tvtropes.org/" type="database"];
    scraper[label="Scraper process:\n\nPython\nrequests+lxml+bz2\n~11.900 pages" type="process"];
    dataset1[label="Dataset\n\nfilms->tropes\n({n_films}->{n_tropes})" type="data"];
    imdb[label="IMDB\ndatasets:\n\nhttps://www.imdb.com/\ninterfaces/" type="database"];
    matcher[label="Film\nmatcher\nprocess" type="process"];
    dataset2[label="Dataset\nFilm->(tropes,\nrating, genres)" type="data"];
    recommender[label="Trope\nRecommender\nprocess" type="process"];
    user[label="User's\npre-selected\ntropes" type="data"];
    builder[label="Trope\nbuilder\nprocess" type="process"];
    trope_sequence[label="Optimal\ntrope\nsequence" type="data"]

    tvtropes -> scraper;
    scraper -> dataset1;
    dataset1 -> matcher;
    imdb -> matcher;
    matcher -> dataset2;
    dataset2 -> recommender;
    recommender -> builder
    user -> builder
    builder -> trope_sequence
}}'''

draw_graphviz(workflow, "main_workflow_extended.pdf")
@
\begin{figure}[h]
\includegraphics[width=\textwidth]{figures/main_workflow_extended.pdf}
\centering
\end{figure}

\section{Tropes Dataset}

\subsection{State of the art}

All of these tropes are described in a live wiki called \textit{TVTropes.org~}\cite{tvtropes}, that is being
collecting thousand of descriptions and examples of tropes from 2014 until now. As the data is fed by a community
of users, we could find the bias that popular films are better described and analysed in terms of the tropes than independent
films, and that popular tropes are more recognised than very specific ones.
The semantic network of knowledge behind \textit{TVTropes.org} is huge and complex; it massively links hierarchies of tropes
to their usage in creations for digital entertainment. The data, however, is only available through its web interface,
which is why, in order to make it usable by the scientific community, Kiesel~\cite{maltekiesel} extracted all
their data to a database so-called \textit{DBTropes.org}.\\
% ¿Que es tvtropes y qué es pictropes? Citar el otro paper.
% Alguien ha usado esos términos?

As the base of the research on automatic trope generation, we begun with a dataset based in the
latest version of DBTropes, called PicTropes \cite{garcia2018overview} that included 5,925 films with 18,270 tropes.
However, the last version of BDTropes is from 2016, and the community of users of TVTropes has triplicated the size
of the database since then; If we work with the latest data from TVTropes our machine learning algorithms
would benefit from having much entries and hence, provide better results. That's why our first step is to
extract the data directly from TVTropes, as discussed in next section.

\subsection{Extracting the tropes from TVTropes: TVTropes scraper}\label{tvtropes-scraper}

We built a crawler that extracts the tropes from TVtropes:

\begin{itemize}
\item
  The scraper \textbf{extracts all the categories} from the main
  categories page: \\ \href{https://tvtropes.org/pmwiki/pmwiki.php/Main/Film}{https://tvtropes.org/pmwiki/pmwiki.php/Main/Film}.
  Then, for each category page, it extracts \textbf{all the film
  identifiers} assigned to it. Finally, for every film page, it extracts
  \textbf{all the trope identifiers}. As result, it builds a
  \textbf{dictionary of films and tropes}.
\item
  The process \textbf{can be stopped and re-launched at any moment}
  because the pages. are permanently stored in the local cache, so it
  will continue from the last page processed.
\item
  The files in cache and the final output file are \textbf{compressed
  using bzip2} with a block size of 900k (the highest compression
  available).
\item
  The file names are \textbf{encoded in base64} to avoid using special
  characters. The character `-' is replaced by '\_'.
\item
  The code avoids slowing down TVTropes servers by \textbf{waiting
  between each download}.
\item
  The execution when no page is cached takes around 3\textasciitilde{}4
  hours. When pages are cached it takes \textasciitilde{}2 minutes. It
  can retrieve around 12K pages.
\end{itemize}

\subsubsection{Usage}\label{usage}

\begin{lstlisting}[basicstyle=\small]
invoke scrape-tvtropes --help
\end{lstlisting}

\begin{lstlisting}[basicstyle=\small]
Usage: inv[oke] [--core-opts] scrape-tvtropes [--options] [other tasks here ...]

Docstring:
Scrape tropes by film in TvTropes.org

  :param cache_directory: The folder that all the downloaded pages are going to be written into.
  :param session: (Optional) Name of the cache folder. If not provided, then it will use the current date/time.

Options:
  -c STRING, --cache-directory=STRING
  -s STRING, --session=STRING
\end{lstlisting}

\subsubsection{Output}\label{output}

The task generates a file called
\texttt{film\_tropes\_\textless{}session\textgreater{}.json.bz2} will be
available in the \texttt{\textless{}cache-directory\textgreater{}}
provided.

\textbf{Format}:

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{\{}
  \DataTypeTok{"<film_identifier>"}\FunctionTok{:} \OtherTok{[}
    \StringTok{"<trope_identifier>"}\OtherTok{,}
    \StringTok{"..."}
  \OtherTok{]}\FunctionTok{,}
  \DataTypeTok{"..."}\FunctionTok{:} \OtherTok{[}
    \StringTok{"..."}
  \OtherTok{]}
\FunctionTok{\}}
\end{Highlighting}
\end{Shaded}

\subsubsection{Example}\label{example}

Example:

\begin{lstlisting}[basicstyle=\small]
invoke scrape-tvtropes --cache-directory ./datasets/scraper/cache/ --session 20190501
\end{lstlisting}

\begin{lstlisting}[basicstyle=\small]
05-01 22:56:05 common.base_script INFO     Retrieving URL from TVTropes and storing in cache: https://tvtropes.org/pmwiki/pmwiki.php/Main/Tropes
05-01 22:56:05 common.base_script INFO     Retrieving URL from TVTropes and storing in cache: https://tvtropes.org/pmwiki/pmwiki.php/Main/Media
05-01 22:56:05 common.base_script INFO     Retrieving URL from TVTropes and storing in cache: https://tvtropes.org/pmwiki/pmwiki.php/Main/FatGirl
05-01 22:56:05 common.base_script INFO     Retrieving URL from TVTropes and storing in cache: https://tvtropes.org/pmwiki/pmwiki.php/Main/Tropes
05-01 22:56:05 common.base_script INFO     Retrieving URL from TVTropes and storing in cache: https://tvtropes.org/pmwiki/pmwiki.php/Main/Media
...
05-01 23:02:05 common.base_script INFO     Retrieving URL from TVTropes and storing in cache: https://tvtropes.org/pmwiki/pmwiki.php/Film/Absurd
05-01 23:02:05 common.base_script INFO     Film Absurd (41 tropes): ['AnAxeToGrind', 'AsLongAsItSoundsForeign', 'BigBad', 'ImplacableMan', 'BigDamnHeroes', 'CarFu', 'ChekhovsGun', 'DecapitationPresentation', 'DolledUpInstallment', 'Eagleland', 'EyeScream', 'FacialHorror', 'Gorn', 'GrossUpCloseUp', 'HealingFactor', 'HorrorDoesntSettleForSimpleTuesday', 'ImpaledWithExtremePrejudice', 'ImpromptuTracheotomy', 'ImprovisedWeapon', 'MyCarHatesMe', 'NeverFoundTheBody', 'NoNameGiven', 'NoodleIncident', 'HealingFactor', 'OffWithHisHead', 'OneWordTitle', 'PeekABooCorpse', 'PowerfulPick', 'RagTagBunchOfMisfits', 'RedShirt', 'RemovingTheHeadOrDestroyingTheBrain', 'ShirtlessScene', 'SlasherSmile', 'SpiritualSuccessor', 'TheStoic', 'ThingsThatGoBumpInTheNight', 'ThrowingOffTheDisability', 'ThisIsADrill', 'TitleDrop', 'WithGreatPowerComesGreatInsanity', 'ZombieGait']
05-01 23:02:05 common.base_script INFO     Status: 222/11846 films
05-01 23:02:05 common.base_script INFO     Retrieving URL from TVTropes and storing in cache: https://tvtropes.org/pmwiki/pmwiki.php/Film/Accepted
05-01 23:02:05 common.base_script INFO     Film Accepted (82 tropes): ['AbandonedHospital', 'AloneInACrowd', 'ArtisticLicenseUniversityAdmissions', 'ReadingsAreOffTheScale', 'ArtisticLicenseEngineering', 'AttentionDeficitOohShiny', 'AnnoyingYoungerSibling', 'BecomingTheMask', 'BigStore', 'BookDumb', 'BrickJoke', 'PsychicPowers', 'BrilliantButLazy', 'ButtMonkey', 'CalvinBall', 'TheCon', 'BigStore', 'ClusterFBomb', 'CoolLoser', 'CoolUncle', 'CripplingOverspecialization', 'DeadpanSnarker', 'DeanBitterman', 'DumbassHasAPoint', 'StrawmanHasAPoint', 'TroublingUnchildlikeBehaviour', 'EpicFail', 'FakeRealTurn', 'ForTheEvulz', 'FunWithAcronyms', 'LampshadeHanging', 'BringMyBrownPants', 'GeniusDitz', 'HighSchoolHustler', 'ImpossiblyDeliciousFood', 'MessOnAPlate', 'IndyPloy', 'OhCrap', 'OhCrap', 'InitiationCeremony', 'IvyLeagueForEveryone', 'KavorkaMan', 'KickTheDog', 'LargeHam', 'MadeOfExplodium', 'MessOnAPlate', 'MostWritersAreWriters', 'StrawmanPolitical', 'JustifiedTrope', 'NeverRecycleABuilding', 'NoodleIncident', 'OnlySaneMan', 'OddFriendship', 'CloudCuckoolander', 'PeekABooCorpse', 'HilarityEnsues', 'PrecisionFStrike', 'AluminumChristmasTrees', 'BleepDammit', 'PrisonRape', 'ProfessionalSlacker', 'ProperlyParanoid', 'PsychicPowers', 'ReadingsAreOffTheScale', 'ScreamsLikeALittleGirl', 'SettingUpdate', 'ShoutOut', 'ActorAllusion', 'SlobsVersusSnobs', 'SmugSnake', 'SoundEffectBleep', 'StartMyOwn', 'StealthPun', 'SupremeChef', 'MessOnAPlate', 'TelepathicSprinklers', 'TheDogBitesBack', 'ThisIsWhatTheBuildingWillLookLike', 'TruthInTelevision', 'ParanoiaFuel', 'VerbedTitle', 'WillingSuspensionOfDisbelief']
05-01 23:02:05 common.base_script INFO     Status: 223/11846 films
...
\end{lstlisting}

Output file content:

\begin{Shaded}
\begin{Highlighting}[]
\FunctionTok{\{}
  \DataTypeTok{"ABCsOfDeath2"}\FunctionTok{:} \OtherTok{[}
    \StringTok{"AbusiveParents"}\OtherTok{,}
    \StringTok{"AirVentPassageway"}\OtherTok{,}
    \ErrorTok{...}
  \OtherTok{]}\FunctionTok{,}
  \DataTypeTok{"ABeautifulDayInTheNeighborhood"}\FunctionTok{:} \OtherTok{[}
    \StringTok{"IncorruptiblePurePureness"}\OtherTok{,}
    \StringTok{"LooselyBasedOnATrueStory"}
  \OtherTok{]}\FunctionTok{,}
  \DataTypeTok{"ABeautifulMind"}\FunctionTok{:} \OtherTok{[}
    \StringTok{"AdultFear"}\OtherTok{,}
    \StringTok{"AllThereIsToKnowAboutTheCryingGame"}\OtherTok{,}
    \ErrorTok{...}
  \OtherTok{]}\FunctionTok{,}
  \ErrorTok{...}
\FunctionTok{\}}
\end{Highlighting}
\end{Shaded}

A valid compressed sample file
\href{https://github.com/raiben/made_recommender/blob/master/datasets/scraper/cache/20190501/films_tropes_20190501.json.bz2}{films\_tropes\_20190501.json.bz2}
can be found in the datasets folder of the project.

\subsubsection{Troubleshooting}\label{troubleshooting}

\begin{itemize}
\tightlist
\item
  \textbf{To re-cache}, please remove the cache folder or use another
  session. The class will auto generate it again in the next execution,
  re-downloading the pages.
\end{itemize}

\subsection{Nature of the data extracted}

<<>>=
import bz2
import json


def read_compressed_json(file_path):
    with open(file_path, 'rb') as file:
        compressed_content = file.read()
    content = bz2.decompress(compressed_content)
    return json.loads(content)


def reverse_dictionary(original_dictionary):
    reversed_dictionary = {}
    for key, value in original_dictionary.items():
        for element in value:
            if element not in reversed_dictionary:
                reversed_dictionary[element] = []
            reversed_dictionary[element].append(key)
    return reversed_dictionary
@

Reading the content of the dataset:
<<term=True>>=
films_dictionary = read_compressed_json(FILM_TROPES_JSON_BZ2_FILE)
tropes_dictionary = reverse_dictionary(films_dictionary)
@

Number of films:
<<term=True>>=
len(films_dictionary.keys())
@

Number of tropes:
<<term=True>>=
len(tropes_dictionary.keys())
@


\subsection{Extracting rating, genre and popularity from IMDB}


\subsection{Matching TVTropes and IMDB identifiers}


\section{Deep larning to predict the quality based on the tropes}


\section{On generating the DNA of a film}

% Quiero generar mi DNA, qué puedo hacer? Qué ha usado la gente?
% Un GA para evolucionar un DNA.
% Funcionamiento del GA

% Qué fitnes usar? Las reglas asociativas
% Generación de reglas asciativas
% Ejecución del GA y resultados
%

% Use a genetic algorithm that uses the associative rules to get the quintassence of the films

% Add new information to PicTropes from IMDB

% Train <something> to predict the rating / Box Office

% Use a genetic algorithm that uses the <something> to get good tropes DNA


\subsection{Extending PicTropes with IMDB information}


\section{Conclusions} \label{sec:conclusions}

TODO

\bibliographystyle{ieeetr}
\bibliography{report}

\end{document}
